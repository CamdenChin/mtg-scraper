{"ast":null,"code":"var _jsxFileName = \"/Users/camdenchin/Desktop/mtg-card-explorer/frontend/src/components/CardList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardList({\n  cards\n}) {\n  _s();\n  const [validCards, setValidCards] = useState(cards);\n  useEffect(() => {\n    setValidCards(cards); // Update validCards whenever cards prop changes\n  }, [cards]);\n  const handleImageError = index => {\n    setValidCards(prevCards => prevCards.filter((_, i) => i !== index));\n  };\n  if (!validCards.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No cards found with images.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this); // Friendly message when no cards are returned\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"search-results\",\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center'\n    },\n    children: validCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '8px',\n        padding: '16px',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: card.image_url,\n        alt: card.name,\n        className: \"card-image\",\n        onError: () => handleImageError(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(CardList, \"gBB76jJdFW9ikQJ8W0L2Hz+QIw0=\");\n_c = CardList;\nCardList.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({\n    image_url: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    mana_cost: PropTypes.string\n  })).isRequired\n};\nexport default CardList;\nvar _c;\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","jsxDEV","_jsxDEV","CardList","cards","_s","validCards","setValidCards","handleImageError","index","prevCards","filter","_","i","length","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","display","flexWrap","justifyContent","map","card","margin","border","borderRadius","padding","textAlign","src","image_url","alt","name","className","onError","_c","propTypes","arrayOf","shape","string","isRequired","mana_cost","$RefreshReg$"],"sources":["/Users/camdenchin/Desktop/mtg-card-explorer/frontend/src/components/CardList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction CardList({ cards }) {\n    const [validCards, setValidCards] = useState(cards);\n\n    useEffect(() => {\n        setValidCards(cards); // Update validCards whenever cards prop changes\n    }, [cards]);\n\n    const handleImageError = (index) => {\n        setValidCards((prevCards) => prevCards.filter((_, i) => i !== index));\n    };\n\n    if (!validCards.length) {\n        return <p>No cards found with images.</p>; // Friendly message when no cards are returned\n    }\n\n    return (\n        <div id=\"search-results\" style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n            {validCards.map((card, index) => (\n                <div key={index} style={{ margin: '10px', border: '1px solid #ccc', borderRadius: '8px', padding: '16px', textAlign: 'center' }}>\n                    <img \n                        src={card.image_url} \n                        alt={card.name} \n                        className=\"card-image\" \n                        onError={() => handleImageError(index)}\n                    />\n                    {/* <p>{card.name}</p>\n                    <p>{card.mana_cost || 'No mana cost'}</p> */}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nCardList.propTypes = {\n    cards: PropTypes.arrayOf(\n        PropTypes.shape({\n            image_url: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            mana_cost: PropTypes.string,\n        })\n    ).isRequired,\n};\n\nexport default CardList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,QAAQA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAACM,KAAK,CAAC;EAEnDL,SAAS,CAAC,MAAM;IACZQ,aAAa,CAACH,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMI,gBAAgB,GAAIC,KAAK,IAAK;IAChCF,aAAa,CAAEG,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC,CAAC;EACzE,CAAC;EAED,IAAI,CAACH,UAAU,CAACQ,MAAM,EAAE;IACpB,oBAAOZ,OAAA;MAAAa,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC/C;EAEA,oBACIjB,OAAA;IAAKkB,EAAE,EAAC,gBAAgB;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE,MAAM;MAAEC,cAAc,EAAE;IAAS,CAAE;IAAAT,QAAA,EAC3FT,UAAU,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAEjB,KAAK,kBACxBP,OAAA;MAAiBmB,KAAK,EAAE;QAAEM,MAAM,EAAE,MAAM;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,YAAY,EAAE,KAAK;QAAEC,OAAO,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAhB,QAAA,eAC5Hb,OAAA;QACI8B,GAAG,EAAEN,IAAI,CAACO,SAAU;QACpBC,GAAG,EAAER,IAAI,CAACS,IAAK;QACfC,SAAS,EAAC,YAAY;QACtBC,OAAO,EAAEA,CAAA,KAAM7B,gBAAgB,CAACC,KAAK;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C;IAAC,GANIV,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACd,EAAA,CA/BQF,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAiCjBA,QAAQ,CAACoC,SAAS,GAAG;EACjBnC,KAAK,EAAEJ,SAAS,CAACwC,OAAO,CACpBxC,SAAS,CAACyC,KAAK,CAAC;IACZR,SAAS,EAAEjC,SAAS,CAAC0C,MAAM,CAACC,UAAU;IACtCR,IAAI,EAAEnC,SAAS,CAAC0C,MAAM,CAACC,UAAU;IACjCC,SAAS,EAAE5C,SAAS,CAAC0C;EACzB,CAAC,CACL,CAAC,CAACC;AACN,CAAC;AAED,eAAexC,QAAQ;AAAC,IAAAmC,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}